name: Hyperledger Service - Test

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Debug Directory Structure
      - name: Debug Directory Structure
        run: |
          echo "Printing directory structure..."
          ls -R
          echo "Printing contents of $PWD/bin"
          ls -l $PWD/bin

      # Step 3: Install Hyperledger Fabric Binaries
      - name: Install Hyperledger Fabric Binaries
        run: |
          echo "Installing Hyperledger Fabric binaries..."
          curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.5.9  # Use Fabric version 2.5.9
          export FABRIC_BIN_PATH=$PWD/bin
          export PATH=$FABRIC_BIN_PATH:$PATH  # Add the binaries to the PATH
          echo "Fabric binaries installed successfully."
          echo "Fabric version:"
          peer version || echo "Peer command not found!"

      # Step 4: Install Dependencies
      - name: Install Dependencies
        working-directory: back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript
        run: |
          npm install
          npm install -g mocha chai hyperledger/fabric-sdk-node
          npx prettier --write src/server.ts

      # Step 5: Generate Environment Variables
      - name: Generate Environment Variables
        working-directory: back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript
        run: |
          chmod +x ./scripts/generateEnv.sh
          npm run generateEnv

      # Step 6: Set Up Hyperledger Fabric Network
      - name: Set Up Hyperledger Fabric Network
        working-directory: back-end/hyperledger-service/test-network
        run: |
          echo "Printing the PATH"
          echo $PATH  # Ensure the PATH includes $FABRIC_BIN_PATH
          chmod +x network.sh
          chmod +x organizations/ccp-generate.sh
          ./network.sh up createChannel -c seedtransectionchannel -ca
          ./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-typescript/ -ccl typescript
          ./organizations/ccp-generate.sh

      # Step 7: Set Environment Variables for Chaincode Packaging
      - name: Set Environment Variables for Chaincode Packaging
        run: |
          export PATH=${PWD}/../bin:$PATH
          export FABRIC_CFG_PATH=$PWD/../config/

      # Step 8: Package Chaincode
      - name: Package Chaincode
        run: |
          peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-typescript/ --lang node --label basic_1.0
          peer lifecycle chaincode queryinstalled

      # Optional: Further steps for installing and testing chaincode
