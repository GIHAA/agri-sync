name: Hyperledger Service - Test

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Hyperledger Fabric Binaries
      - name: Install Hyperledger Fabric Binaries
        run: |
          echo "Downloading and installing Hyperledger Fabric binaries..."
          curl -sSL https://bit.ly/2ysbOFE | bash -s -- 3.0.0
          export PATH=$PWD/bin:$PATH
          export FABRIC_CFG_PATH=$PWD/config/
          
          # Verify the peer binary is installed
          if ! [ -x "$(command -v peer)" ]; then
            echo 'Error: peer binary not found.' >&2
            exit 1
          fi
          echo "Fabric binaries installed successfully."

      # Step 3: Verify Docker Containers and Fabric Network
      - name: Verify Docker Containers and Fabric Network
        run: |
          docker ps | grep -q "peer0.org1.example.com"
          if [ $? -ne 0 ]; then
            echo "Error: peer container not running." >&2
            exit 1
          fi
          docker ps | grep -q "orderer.example.com"
          if [ $? -ne 0 ]; then
            echo "Error: orderer container not running." >&2
            exit 1
          fi
          echo "Docker containers are running, peer and orderer containers are up."

      # Step 4: Set Up Hyperledger Fabric Network
      - name: Set Up Hyperledger Fabric Network
        working-directory: ./hyperledger-service/test-network
        run: |
          ./network.sh up createChannel -c seedtransectionchannel -ca
          ./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-typescript/ -ccl typescript
          ./organizations/ccp-generate.sh

      # Step 5: Package and Install Chaincode
      - name: Package and Install Chaincode
        working-directory: ./hyperledger-service/test-network
        run: |
          export PATH=${PWD}/../bin:$PATH
          export FABRIC_CFG_PATH=$PWD/../config/
          peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-typescript/ --lang node --label basic_1.0
          peer lifecycle chaincode queryinstalled

      # Step 6: Set Environment Variables for Peer Organizations
      - name: Set Environment Variables for Peer Organizations
        run: |
          # Set Org1 Peer
          export CORE_PEER_TLS_ENABLED=true
          export CORE_PEER_LOCALMSPID=Org1MSP
          export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
          export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
          export CORE_PEER_ADDRESS=localhost:7051

          # Set Org2 Peer
          export CORE_PEER_LOCALMSPID=Org2MSP
          export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
          export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
          export CORE_PEER_ADDRESS=localhost:9051

      # Step 7: Invoke Chaincode to Initialize Ledger
      - name: Invoke Chaincode to Initialize Ledger
        run: |
          peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem" -C seedtransectionchannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt" --peerAddresses localhost:9051 --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt" -c '{"function":"InitLedger","Args":[]}'

      # Step 8: Query Chaincode for All Seeds
      - name: Query Chaincode for All Seeds
        run: |
          peer chaincode query -C seedtransectionchannel -n basic -c '{"Args":["GetAllSeeds"]}'

      # Step 9: Query Chaincode for Specific Seed History
      - name: Query Chaincode for Specific Seed History
        run: |
          peer chaincode query -C seedtransectionchannel -n basic -c '{"Args":["GetSeedHistory","farmer2","Corn"]}'

      # Step 10: Teardown Hyperledger Fabric Network
      - name: Teardown Hyperledger Fabric Network
        working-directory: ./hyperledger-service/test-network
        run: |
          ./network.sh down
