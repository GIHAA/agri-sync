name: Hyperledger Service - Test

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Download Matching Fabric Binaries and Images
      - name: Download Fabric Binaries and Images
        run: |
          curl -sSL https://bit.ly/2ysbOFE | bash -s -- 3.0.0
          export PATH=$PWD/bin:$PATH
          export FABRIC_CFG_PATH=$PWD/config/

      # Step 3: Debug Directory Structure
      - name: Debug Directory Structure
        run: |
          echo "Checking directory structure..."
          ls -R
        working-directory: back-end/hyperledger-service/test-network

      # Step 4: Install Dependencies
      - name: Install Dependencies
        working-directory: back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript
        run: |
          npm install
          npm install -g mocha chai hyperledger/fabric-sdk-node
          npx prettier --write src/server.ts

      # Step 5: Set Executable Permissions for Scripts
      - name: Set Executable Permissions
        working-directory: back-end/hyperledger-service/test-network
        run: |
          chmod +x network.sh
          chmod +x organizations/ccp-generate.sh
          chmod +x scripts/createChannel.sh

      # Step 6: Set Up Hyperledger Fabric Network
      - name: Set Up Hyperledger Fabric Network
        working-directory: back-end/hyperledger-service/test-network
        run: |
          ./network.sh up createChannel -c seedtransectionchannel -ca
          ./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-typescript/ -ccl typescript
          ./organizations/ccp-generate.sh

      # Step 7: Package and Install Chaincode
      - name: Package and Install Chaincode
        working-directory: back-end/hyperledger-service/test-network
        run: |
          export PATH=${PWD}/../bin:$PATH
          export FABRIC_CFG_PATH=$PWD/../config/
          peer lifecycle chaincode package basic.tar.gz --path ../asset-transfer-basic/chaincode-typescript/ --lang node --label basic_1.0
          peer lifecycle chaincode queryinstalled

      # Step 8: Start Hyperledger REST Service
      - name: Start Hyperledger REST Service
        working-directory: back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript
        run: |
          export REDIS_PASSWORD=$(uuidgen)
          npm run start:redis
          npm run start:dev &
          sleep 30

      # Step 9: Run Hyperledger Tests
      - name: Run Hyperledger Tests
        working-directory: back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript
        run: |
          mocha tests --recursive > test-results.txt 2>&1

      # Step 10: Process Test Results
      - name: Process Test Results
        id: test-results
        run: |
          if grep -q "passing" back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript/test-results.txt; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "tests_passed=true" >> $GITHUB_OUTPUT
            echo "total_tests=$(grep -o "passing" back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript/test-results.txt | wc -l)" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "tests_passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('back-end/hyperledger-service/asset-transfer-basic/rest-api-typescript/test-results.txt', 'utf8');
            const testsPassed = '${{ steps.test-results.outputs.tests_passed }}' === 'true';
            const totalTests = '${{ steps.test-results.outputs.total_tests }}';

            const header = testsPassed 
              ? '### ✅ All Tests Passed! 🎉\n\n' +
                `${totalTests} tests completed successfully ⭐\n\n`
              : '### ❌ Tests Failed\n\n';
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `${header}\`\`\`\n${results}\n\`\`\``
            });

      # Step 11: Teardown Hyperledger Fabric Network
      - name: Teardown Hyperledger Fabric Network
        working-directory: back-end/hyperledger-service/test-network
        run: |
          ./network.sh down
